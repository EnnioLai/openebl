// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/business_unit/bu_controller.go

// Package mock_business_unit is a generated GoMock package.
package mock_business_unit

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	business_unit "github.com/openebl/openebl/pkg/bu_server/business_unit"
	model "github.com/openebl/openebl/pkg/bu_server/model"
)

// MockBusinessUnitManager is a mock of BusinessUnitManager interface.
type MockBusinessUnitManager struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessUnitManagerMockRecorder
}

// MockBusinessUnitManagerMockRecorder is the mock recorder for MockBusinessUnitManager.
type MockBusinessUnitManagerMockRecorder struct {
	mock *MockBusinessUnitManager
}

// NewMockBusinessUnitManager creates a new mock instance.
func NewMockBusinessUnitManager(ctrl *gomock.Controller) *MockBusinessUnitManager {
	mock := &MockBusinessUnitManager{ctrl: ctrl}
	mock.recorder = &MockBusinessUnitManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessUnitManager) EXPECT() *MockBusinessUnitManagerMockRecorder {
	return m.recorder
}

// AddAuthentication mocks base method.
func (m *MockBusinessUnitManager) AddAuthentication(ctx context.Context, ts int64, req business_unit.AddAuthenticationRequest) (model.BusinessUnitAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthentication", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnitAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAuthentication indicates an expected call of AddAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) AddAuthentication(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).AddAuthentication), ctx, ts, req)
}

// CreateBusinessUnit mocks base method.
func (m *MockBusinessUnitManager) CreateBusinessUnit(ctx context.Context, ts int64, req business_unit.CreateBusinessUnitRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBusinessUnit", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBusinessUnit indicates an expected call of CreateBusinessUnit.
func (mr *MockBusinessUnitManagerMockRecorder) CreateBusinessUnit(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBusinessUnit", reflect.TypeOf((*MockBusinessUnitManager)(nil).CreateBusinessUnit), ctx, ts, req)
}

// ListAuthentication mocks base method.
func (m *MockBusinessUnitManager) ListAuthentication(ctx context.Context, req business_unit.ListAuthenticationRequest) (business_unit.ListAuthenticationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAuthentication", ctx, req)
	ret0, _ := ret[0].(business_unit.ListAuthenticationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAuthentication indicates an expected call of ListAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) ListAuthentication(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).ListAuthentication), ctx, req)
}

// ListBusinessUnits mocks base method.
func (m *MockBusinessUnitManager) ListBusinessUnits(ctx context.Context, req business_unit.ListBusinessUnitsRequest) (business_unit.ListBusinessUnitsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBusinessUnits", ctx, req)
	ret0, _ := ret[0].(business_unit.ListBusinessUnitsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBusinessUnits indicates an expected call of ListBusinessUnits.
func (mr *MockBusinessUnitManagerMockRecorder) ListBusinessUnits(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBusinessUnits", reflect.TypeOf((*MockBusinessUnitManager)(nil).ListBusinessUnits), ctx, req)
}

// RevokeAuthentication mocks base method.
func (m *MockBusinessUnitManager) RevokeAuthentication(ctx context.Context, ts int64, req business_unit.RevokeAuthenticationRequest) (model.BusinessUnitAuthentication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAuthentication", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnitAuthentication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAuthentication indicates an expected call of RevokeAuthentication.
func (mr *MockBusinessUnitManagerMockRecorder) RevokeAuthentication(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAuthentication", reflect.TypeOf((*MockBusinessUnitManager)(nil).RevokeAuthentication), ctx, ts, req)
}

// SetStatus mocks base method.
func (m *MockBusinessUnitManager) SetStatus(ctx context.Context, ts int64, req business_unit.SetBusinessUnitStatusRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockBusinessUnitManagerMockRecorder) SetStatus(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockBusinessUnitManager)(nil).SetStatus), ctx, ts, req)
}

// UpdateBusinessUnit mocks base method.
func (m *MockBusinessUnitManager) UpdateBusinessUnit(ctx context.Context, ts int64, req business_unit.UpdateBusinessUnitRequest) (model.BusinessUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBusinessUnit", ctx, ts, req)
	ret0, _ := ret[0].(model.BusinessUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBusinessUnit indicates an expected call of UpdateBusinessUnit.
func (mr *MockBusinessUnitManagerMockRecorder) UpdateBusinessUnit(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBusinessUnit", reflect.TypeOf((*MockBusinessUnitManager)(nil).UpdateBusinessUnit), ctx, ts, req)
}
