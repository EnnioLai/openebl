// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/trade_document/file_based_ebl.go

// Package mock_trade_document is a generated GoMock package.
package mock_trade_document

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bill_of_lading "github.com/openebl/openebl/pkg/bu_server/model/trade_document/bill_of_lading"
	trade_document "github.com/openebl/openebl/pkg/bu_server/trade_document"
)

// MockFileBaseEBLController is a mock of FileBaseEBLController interface.
type MockFileBaseEBLController struct {
	ctrl     *gomock.Controller
	recorder *MockFileBaseEBLControllerMockRecorder
}

// MockFileBaseEBLControllerMockRecorder is the mock recorder for MockFileBaseEBLController.
type MockFileBaseEBLControllerMockRecorder struct {
	mock *MockFileBaseEBLController
}

// NewMockFileBaseEBLController creates a new mock instance.
func NewMockFileBaseEBLController(ctrl *gomock.Controller) *MockFileBaseEBLController {
	mock := &MockFileBaseEBLController{ctrl: ctrl}
	mock.recorder = &MockFileBaseEBLControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileBaseEBLController) EXPECT() *MockFileBaseEBLControllerMockRecorder {
	return m.recorder
}

// AmendmentRequest mocks base method.
func (m *MockFileBaseEBLController) AmendmentRequest(ctx context.Context, ts int64, request trade_document.AmendmentRequestEBLRequest) (bill_of_lading.BillOfLadingPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AmendmentRequest", ctx, ts, request)
	ret0, _ := ret[0].(bill_of_lading.BillOfLadingPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AmendmentRequest indicates an expected call of AmendmentRequest.
func (mr *MockFileBaseEBLControllerMockRecorder) AmendmentRequest(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AmendmentRequest", reflect.TypeOf((*MockFileBaseEBLController)(nil).AmendmentRequest), ctx, ts, request)
}

// Create mocks base method.
func (m *MockFileBaseEBLController) Create(ctx context.Context, ts int64, request trade_document.IssueFileBasedEBLRequest) (bill_of_lading.BillOfLadingPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, ts, request)
	ret0, _ := ret[0].(bill_of_lading.BillOfLadingPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileBaseEBLControllerMockRecorder) Create(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileBaseEBLController)(nil).Create), ctx, ts, request)
}

// List mocks base method.
func (m *MockFileBaseEBLController) List(ctx context.Context, request trade_document.ListFileBasedEBLRequest) (trade_document.ListFileBasedEBLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, request)
	ret0, _ := ret[0].(trade_document.ListFileBasedEBLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFileBaseEBLControllerMockRecorder) List(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileBaseEBLController)(nil).List), ctx, request)
}

// Transfer mocks base method.
func (m *MockFileBaseEBLController) Transfer(ctx context.Context, ts int64, request trade_document.TransferEBLRequest) (bill_of_lading.BillOfLadingPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, ts, request)
	ret0, _ := ret[0].(bill_of_lading.BillOfLadingPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer.
func (mr *MockFileBaseEBLControllerMockRecorder) Transfer(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockFileBaseEBLController)(nil).Transfer), ctx, ts, request)
}

// UpdateDraft mocks base method.
func (m *MockFileBaseEBLController) UpdateDraft(ctx context.Context, ts int64, request trade_document.UpdateFileBasedEBLDraftRequest) (bill_of_lading.BillOfLadingPack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDraft", ctx, ts, request)
	ret0, _ := ret[0].(bill_of_lading.BillOfLadingPack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDraft indicates an expected call of UpdateDraft.
func (mr *MockFileBaseEBLControllerMockRecorder) UpdateDraft(ctx, ts, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDraft", reflect.TypeOf((*MockFileBaseEBLController)(nil).UpdateDraft), ctx, ts, request)
}
