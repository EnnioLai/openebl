// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/cert/cert_manager.go

// Package mock_cert is a generated GoMock package.
package mock_cert

import (
	context "context"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/openebl/openebl/pkg/bu_server/storage"
)

// MockCertVerifier is a mock of CertVerifier interface.
type MockCertVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockCertVerifierMockRecorder
}

// MockCertVerifierMockRecorder is the mock recorder for MockCertVerifier.
type MockCertVerifierMockRecorder struct {
	mock *MockCertVerifier
}

// NewMockCertVerifier creates a new mock instance.
func NewMockCertVerifier(ctrl *gomock.Controller) *MockCertVerifier {
	mock := &MockCertVerifier{ctrl: ctrl}
	mock.recorder = &MockCertVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertVerifier) EXPECT() *MockCertVerifierMockRecorder {
	return m.recorder
}

// VerifyCert mocks base method.
func (m *MockCertVerifier) VerifyCert(ctx context.Context, tx storage.Tx, ts int64, certChain []*x509.Certificate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCert", ctx, tx, ts, certChain)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyCert indicates an expected call of VerifyCert.
func (mr *MockCertVerifierMockRecorder) VerifyCert(ctx, tx, ts, certChain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCert", reflect.TypeOf((*MockCertVerifier)(nil).VerifyCert), ctx, tx, ts, certChain)
}
