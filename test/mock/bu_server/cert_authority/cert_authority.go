// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/bu_server/cert_authority/cert_authority.go

// Package mock_cert_authority is a generated GoMock package.
package mock_cert_authority

import (
	context "context"
	x509 "crypto/x509"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cert_authority "github.com/openebl/openebl/pkg/bu_server/cert_authority"
	model "github.com/openebl/openebl/pkg/bu_server/model"
	storage "github.com/openebl/openebl/pkg/bu_server/storage"
)

// MockCertAuthority is a mock of CertAuthority interface.
type MockCertAuthority struct {
	ctrl     *gomock.Controller
	recorder *MockCertAuthorityMockRecorder
}

// MockCertAuthorityMockRecorder is the mock recorder for MockCertAuthority.
type MockCertAuthorityMockRecorder struct {
	mock *MockCertAuthority
}

// NewMockCertAuthority creates a new mock instance.
func NewMockCertAuthority(ctrl *gomock.Controller) *MockCertAuthority {
	mock := &MockCertAuthority{ctrl: ctrl}
	mock.recorder = &MockCertAuthorityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertAuthority) EXPECT() *MockCertAuthorityMockRecorder {
	return m.recorder
}

// AddCertificate mocks base method.
func (m *MockCertAuthority) AddCertificate(ctx context.Context, ts int64, req cert_authority.AddCertificateRequest) (model.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificate", ctx, ts, req)
	ret0, _ := ret[0].(model.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCertificate indicates an expected call of AddCertificate.
func (mr *MockCertAuthorityMockRecorder) AddCertificate(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificate", reflect.TypeOf((*MockCertAuthority)(nil).AddCertificate), ctx, ts, req)
}

// IssueCertificate mocks base method.
func (m *MockCertAuthority) IssueCertificate(ctx context.Context, ts int64, req cert_authority.IssueCertificateRequest) ([]*x509.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueCertificate", ctx, ts, req)
	ret0, _ := ret[0].([]*x509.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueCertificate indicates an expected call of IssueCertificate.
func (mr *MockCertAuthorityMockRecorder) IssueCertificate(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueCertificate", reflect.TypeOf((*MockCertAuthority)(nil).IssueCertificate), ctx, ts, req)
}

// ListCertificates mocks base method.
func (m *MockCertAuthority) ListCertificates(ctx context.Context, req cert_authority.ListCertificatesRequest) (cert_authority.ListCertificatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", ctx, req)
	ret0, _ := ret[0].(cert_authority.ListCertificatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockCertAuthorityMockRecorder) ListCertificates(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockCertAuthority)(nil).ListCertificates), ctx, req)
}

// RevokeCertificate mocks base method.
func (m *MockCertAuthority) RevokeCertificate(ctx context.Context, ts int64, req cert_authority.RevokeCertificateRequest) (model.Cert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeCertificate", ctx, ts, req)
	ret0, _ := ret[0].(model.Cert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeCertificate indicates an expected call of RevokeCertificate.
func (mr *MockCertAuthorityMockRecorder) RevokeCertificate(ctx, ts, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeCertificate", reflect.TypeOf((*MockCertAuthority)(nil).RevokeCertificate), ctx, ts, req)
}

// MockCertStorage is a mock of CertStorage interface.
type MockCertStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCertStorageMockRecorder
}

// MockCertStorageMockRecorder is the mock recorder for MockCertStorage.
type MockCertStorageMockRecorder struct {
	mock *MockCertStorage
}

// NewMockCertStorage creates a new mock instance.
func NewMockCertStorage(ctrl *gomock.Controller) *MockCertStorage {
	mock := &MockCertStorage{ctrl: ctrl}
	mock.recorder = &MockCertStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCertStorage) EXPECT() *MockCertStorageMockRecorder {
	return m.recorder
}

// AddCertificate mocks base method.
func (m *MockCertStorage) AddCertificate(ctx context.Context, tx storage.Tx, cert model.Cert) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCertificate", ctx, tx, cert)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCertificate indicates an expected call of AddCertificate.
func (mr *MockCertStorageMockRecorder) AddCertificate(ctx, tx, cert interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCertificate", reflect.TypeOf((*MockCertStorage)(nil).AddCertificate), ctx, tx, cert)
}

// CreateTx mocks base method.
func (m *MockCertStorage) CreateTx(ctx context.Context, options ...storage.CreateTxOption) (storage.Tx, context.Context, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTx", varargs...)
	ret0, _ := ret[0].(storage.Tx)
	ret1, _ := ret[1].(context.Context)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTx indicates an expected call of CreateTx.
func (mr *MockCertStorageMockRecorder) CreateTx(ctx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTx", reflect.TypeOf((*MockCertStorage)(nil).CreateTx), varargs...)
}

// ListCertificates mocks base method.
func (m *MockCertStorage) ListCertificates(ctx context.Context, tx storage.Tx, req cert_authority.ListCertificatesRequest) (cert_authority.ListCertificatesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCertificates", ctx, tx, req)
	ret0, _ := ret[0].(cert_authority.ListCertificatesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates.
func (mr *MockCertStorageMockRecorder) ListCertificates(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockCertStorage)(nil).ListCertificates), ctx, tx, req)
}
